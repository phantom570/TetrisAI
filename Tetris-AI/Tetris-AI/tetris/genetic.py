import random
import math
import statistics
import time
from operator import itemgetter
from tetris import TetrisApp
from sys import stdout
from functools import reduce


def createIndividual(size):
    result = []
    for i in range(0, size):
        result.append(random.uniform(-10, 10))
    return result

def individualFromDistribution(average, std):
    result = []
    for i in range(0, size):
        result.append(random.normalvariate(average[i], std[i]))
    return result

def createGeneration(number, size):
    results = []
    for i in range(0, number):
        tmp = createIndividual(size)
        results.append(tmp)
    return results

def generationFromDistribution(number, size, average, std):
    results = []
    for i in range(0, number):
        tmp = individualFromDistribution(average, std)
        results.append(tmp)
    return results

def mutate(x):
    tmp = createIndividual(len(x))
    for i in range(0, len(x)):
        if random.uniform(0, 1) > 0.6:
            x[i] = tmp[i]
    return x

def crossIndivuals(x, y):
    result = []
    for i in range(0, len(x)):
        if random.uniform(0, 1) > 0.5:
            result.append(y[i])
        else:
            result.append(x[i])
    return x

def selectBestIndividuals(scores, number):
    bests = list(reversed(sorted(scores, key=itemgetter(0))))[0:number]
    return list(map(lambda x: x[1], bests))

def fitness(individual, seeds, pieceLimit):
    results = []
    for seed in seeds:
        results.append(TetrisApp(False, seed).run(indiv, pieceLimit))
    return int(sum(results)/len(results))

def computeAverage(population):
    result = list(reduce(lambda i1, i2: [a+b for a,b in zip(i1, i2)], population))
    result = list(map(lambda x: x/len(population), result))
    return result

def computeStandardDeviation(population):
    average = computeAverage(population)
    result = [[] for _ in range(0, len(population[0]))]
    for individual in population:
        for index, weight in enumerate(individual):
            result[index].append(weight)
    result = list(map(lambda weights: statistics.stdev(weights), result))
    return result

survivors_rate = 0.2
pieceLimit = 1000
number = 50
batch = 100
size = 34

survivors = [[-7.079322515535496, 0.4084491347254038, -7.402904430910445, -2.7844637476685787, -7.594275435309783, -10.684195700825878, -7.30837936663268, -5.295503423257339, -6.033995687870372, 3.8520349017794207, -15.163733314556929, -9.587312487454195, -6.378719930783198, 2.966829274549533, -20.831786456174793, -0.03056073728795372, 2.9546773925917873, -5.402273658374742, 1.4315699979880365, -7.192423456136776, -13.517692713048259, -2.61095929685523, 2.3238434707509485, -0.20247882164471986, -8.565533256031395, -6.756626774624734, -3.7825141520209975, -3.1585858092230685, -9.004019495787716, -1.3788389385805409, 11.761791163455952, -10.004510260785437, -8.339729845555425, 4.931069860285232],[-7.474811040277999, -1.7388998167593965, -7.403164993532727, -6.42470716303297, -7.456451892528946, -12.034920110518385, -9.408483754945468, -4.020836538554987, -8.567128797330072, 2.848645345594795, -11.929334828227308, -15.850030022102045, -6.5286891922711074, 6.167003444216878, -8.365914650043994, 4.48115406470916, -0.7625773562019091, -7.9266936997609605, -1.649318175085213, -2.6293044397733283, -12.222802903694186, -4.242315879052058, 3.203050236205614, -0.752096963973472, -7.448665867922473, -7.228033440261754, -2.5644513544890915, -1.4324037221952783, -4.562528820226978, -2.1915420620564534, 10.736787513051997, -11.096433605700962, -9.05041904447242, -1.751983305141727],[-1.5396056314838051, -1.28985252553531, -9.55939973079273, -6.020212792774943, -3.8189348812580417, -9.276221867819928, -11.049873242841045, -2.475190998851372, -6.722318631746939, 1.7784020351963314, -15.835459622655993, -17.90840631545077, -0.3758017597967882, 5.206126787806387, -16.108154174781415, 0.05715620838493929, -3.0842029726979567, -7.998698298687171, -2.0243252944220305, 0.1340090713001154, -11.359885222399667, -3.737816299450947, 2.4176868807048666, -2.7773379205945163, -5.372339113593052, -5.228176250918142, -4.641006506431996, -5.309035304126698, -2.75054902159475, 1.6461006409762995, 8.669335916149324, -10.838416114663108, -9.309744659565142, -7.039777789222682],[-2.6858983840113106, -4.066945649094353, -6.6028598255064175, -3.6113692499628147, -8.289786386427751, -6.741895238906561, -1.7311822712389493, -6.272271732584187, -3.8266538387236992, -0.8541285326647476, -12.545043659070158, -14.05849434636729, -4.256544306745919, 3.1107299959034354, -20.354208614354306, 2.585037172742668, -1.3070801122996043, -8.86387941039304, 1.6976930990392132, 3.7839223891083944, -9.772308012349907, -7.596129992681467, 3.7920468181258227, -2.549463987333961, -5.685780066274189, -6.311286970663963, -2.4354590084919385, -7.192536025126225, -4.777757908899172, -0.4228265707554192, 12.107081642198457, -11.587418757154374, -8.728257982638242, 8.04143922989667],[-8.5479653838089, -1.60494594308804, -1.8232423721829427, -6.6662509160349535, -6.785904126863624, -7.534648357216755, -2.771076764307815, -4.073232939652832, -6.772287552374782, 4.192743192592948, -14.920375142550741, -18.409281593055642, -2.247433780436276, 10.66696220121807, -12.865640573953502, -0.36910150139409525, 4.284547220515556, -2.59728165122557, 0.9161062842277103, -3.0363779791479346, -10.394147687928124, -4.600921963580275, 3.947532208341888, -0.7357225139470711, -4.9871211914142135, -7.198744228959488, -2.276919609125582, -5.016369892765137, -2.925367949691931, 0.7693846431454126, 8.535407829746543, -10.192362473688938, -8.838713504889041, -1.4969653096791413],[-5.1201195901469365, -0.07286751923358015, -0.8109293327422344, -5.00506161296176, -3.034511318746054, -10.874718486161003, -1.7001910571810956, -5.288051270750371, -5.01367600521526, 4.732724527790934, -13.205866152495862, -18.947093942577066, -3.3255386702269494, 0.6782293969444937, -19.421935288368882, -0.035541520216152644, 2.194135001689772, -8.682128553505176, -4.285211439361947, -4.904220448425889, -14.824288052223585, -5.097273511459154, 2.866397231310994, -3.5499465803514614, -8.530007105341303, -7.027848124425693, -2.0075343299017856, -2.3952200812151054, -4.561279952684006, 1.0694608654980833, 8.587395627978724, -11.463870259498155, -8.40896196243244, 8.345861305383838],[-0.6592821298420546, -3.728099144510246, -1.0053831195536995, -4.057497731586515, -6.363681776035936, -5.925579147936942, -5.356946745274303, -5.9378708923314765, -10.307102353594964, -3.551049987731661, -18.303441281301723, -17.13943354421619, -4.874453196497102, 2.6820569819125692, -14.853345730244511, 5.213118149669934, 4.771934111119656, -5.215398482472618, -4.565018232221284, -5.302129361756133, -11.878195402168616, -3.4725648861608347, 2.4947218186039852, 0.6016661803953893, -5.991607971659801, -7.9611655277299205, -5.85869844134254, -1.9912525941253878, -14.180095241424894, 0.8913171394483466, 8.942481374156927, -10.010518561480835, -8.651279486310386, 0.1809616546062811],[-9.901236706651698, -0.34674512247742717, -7.457239312581076, -6.639724294314924, -8.81716182937435, -7.585931436427412, -5.818029710668695, -7.868297459183201, -5.618924894938249, -4.148896181876771, -12.085026382256252, -12.593969804908053, -3.7519705432702506, 1.3470564246932204, -17.25021409203794, -2.158470557128508, 4.523009294800928, -3.439063711352579, -4.5562222934880285, -3.3455733406273898, -13.389029159549537, -5.736369750190515, 3.6706232296226373, -2.053252459352264, -4.707988137195663, -4.452025059542145, -1.6273342021787336, -8.802100710792429, -9.733608783159308, -0.009492723113897483, 7.197517740363407, -9.961083400152946, -8.490280314500648, 0.5590694102828682],[-1.2647311775882684, -0.8029345834888093, -7.653044559806861, -4.871298554686161, -3.3244273967050746, -8.207203622213965, 1.148479608702126, -7.488129832885854, -7.6149643369280104, 5.917526876523409, -13.504768528665902, -8.936173558833737, -5.5327807541372245, 0.08904206702943718, -16.855056620413077, -3.677546825450797, -0.701147368419468, -1.1213500977907387, -0.5466088446935436, -0.6714489653194131, -12.261372294848965, -4.481663064659581, 2.298104932341609, -1.6309572256765623, -7.409558763629532, -8.381333823580011, -3.1530165194392525, -2.709092884892976, -2.1893603467883764, -1.8825658669819896, 6.722788640092077, -10.924744842461257, -8.894449309924969, 9.551699415289589],[-6.611752028945782, -4.250725580320059, -5.023691054269568, -6.60469459079245, -5.22311547369107, -6.058356966503254, -8.328518243287345, -7.296928598647937, -7.8103655175300934, 3.481502973477764, -12.14153345575466, -13.149544368085504, -8.625083869711753, 4.812879227313336, -17.460132634324072, 1.8511757263234092, 0.8097759150996584, -8.914746007150116, 1.7822627123581178, -1.0598917284263507, -12.657604335290285, -5.727873951113296, 2.4445067589253084, -1.019653287401218, -2.9155210461015284, -6.609411949912444, -0.10721264068699599, -6.917182158325215, -7.171035514733399, -3.072509687196643, 10.619842181246078, -10.583617176613721, -8.510113013388935, 4.1089122742715665]]

generation = survivors

average = computeAverage(survivors)
extra_var_multiplier = max((1.0-10/float(batch/2)),0)
std = list(map(lambda std: std + 0.001 * extra_var_multiplier, computeStandardDeviation(survivors)))

print ("")
# print ("time elapsed: ", time.time() - start_time)
print ("average: ", average)
print ("std: ", std)
print ("")

for individual in generationFromDistribution(number-len(generation), size, average, std):
    generation.append(individual)


#generation = createGeneration(number, size)
for iteration in range(11, batch):
    start_time = time.time()
    seeds = []
    for _ in range(0, 5):
        seeds.append(random.randint(0, 100000000))

    print("")
    print("")
    print("--- Batch " + str(iteration) + " ---")
    print("")
    scores = []
    for index, indiv in enumerate(generation):
        message = "\rindiv. " + str(index) + "/" + str(len(generation))
        stdout.write(message)
        stdout.flush()
        scores.append([fitness(indiv, seeds, pieceLimit), indiv])
    print ("\n")
    for value in (list(reversed(sorted(scores, key=itemgetter(0))))):
        print(value)
    survivors = selectBestIndividuals(scores, int(len(scores)*survivors_rate))
    print(len(survivors))
    generation = survivors

    average = computeAverage(survivors)
    extra_var_multiplier = max((1.0-iteration/float(batch/2)),0)
    std = list(map(lambda std: std + 0.001 * extra_var_multiplier, computeStandardDeviation(survivors)))

    print ("")
    print ("time elapsed: ", time.time() - start_time)
    print ("average: ", average)
    print ("std: ", std)
    print ("")

    for individual in generationFromDistribution(number-len(generation), size, average, std):
        generation.append(individual)
